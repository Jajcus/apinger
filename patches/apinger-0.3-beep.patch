Provided by: "Christian W. Zuckschwerdt" <zany@triq.net>

[...]
>- Integrate audible alarms into apinger. That way there's no need to
>  spawn a process on every alarm.
>
>- Call the beeper every n-samples with the current delay value. That way
>  an idle machine will tick softly and a busy machine will click more
>  notebly.
[...]
>I hacked a beeper program and mashed it into apinger. The patch is
>attached.
>

diff -ruN apinger-0.3-pristine/src/Makefile.am apinger-0.3-mod/src/Makefile.am
--- apinger-0.3-pristine/src/Makefile.am	Thu Jul 18 10:37:07 2002
+++ apinger-0.3-mod/src/Makefile.am	Tue Jul 23 18:53:25 2002
@@ -7,6 +7,8 @@
 apinger_SOURCES = \
 		apinger.c \
 		apinger.h \
+		beeplib.c \
+		beeplib.h \
 		cfgparser1.y \
 		cfgparser2.l \
 		conf.c \
diff -ruN apinger-0.3-pristine/src/apinger.c apinger-0.3-mod/src/apinger.c
--- apinger-0.3-pristine/src/apinger.c	Fri Jul 19 14:05:46 2002
+++ apinger-0.3-mod/src/apinger.c	Tue Jul 23 19:25:32 2002
@@ -20,6 +20,7 @@
 
 #include "config.h"
 #include "apinger.h"
+#include "beeplib.h"
 
 #include <stdio.h>
 #ifdef HAVE_STDLIB_H
@@ -317,6 +318,13 @@
 			return;
 		}
 	}
+	if (on>0) command=a->beep_on;
+	else command=a->beep_off;
+	if (command){
+		command=subst_macros(command,t,a,on);
+		debug("Beeping: %s",command);
+		beepcmd(command);
+	}
 	if (on>0) command=a->pipe_on;
 	else command=a->pipe_off;
 	if (command){
diff -ruN apinger-0.3-pristine/src/beeplib.c apinger-0.3-mod/src/beeplib.c
--- apinger-0.3-pristine/src/beeplib.c	Thu Jan  1 01:00:00 1970
+++ apinger-0.3-mod/src/beeplib.c	Tue Jul 23 19:44:40 2002
@@ -0,0 +1,271 @@
+/*  beep - just what it sounds like, makes the console beep - but with
+ * precision control.  See the man page for details.
+ *
+ * Try beep -h for command line args
+ *
+ * This code is copyright (C) Johnathan Nightingale, 2000.
+ *
+ * This code may distributed only under the terms of the GNU Public License 
+ * which can be found at http://www.gnu.org/copyleft or in the file COPYING 
+ * supplied with this code.
+ *
+ * This code is not distributed with warranties of any kind, including implied
+ * warranties of merchantability or fitness for a particular use or ability to 
+ * breed pandas in captivity, it just can't be done.
+ *
+ * Bug me, I like it:  http://johnath.com/  or johnath@johnath.com
+ */
+
+#include <fcntl.h>
+#include <getopt.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <linux/kd.h>
+
+/* I don't know where this number comes from, I admit that freely.  A 
+   wonderful human named Raine M. Ekman used it in a program that played
+   a tune at the console, and apparently, it's how the kernel likes its
+   sound requests to be phrased.  If you see Raine, thank him for me.  
+   
+   June 28, email from Peter Tirsek (peter at tirsek dot com):
+   
+   This number represents the fixed frequency of the original PC XT's
+   timer chip (the 8254 AFAIR), which is approximately 1.193 MHz. This
+   number is divided with the desired frequency to obtain a counter value,
+   that is subsequently fed into the timer chip, tied to the PC speaker.
+   The chip decreases this counter at every tick (1.193 MHz) and when it
+   reaches zero, it toggles the state of the speaker (on/off, or in/out),
+   resets the counter to the original value, and starts over. The end
+   result of this is a tone at approximately the desired frequency. :)
+*/
+#ifndef CLOCK_TICK_RATE
+#define CLOCK_TICK_RATE 1193180
+#endif
+
+#define VERSION_STRING "beep-1.2.2"
+char *copyright = 
+"Copyright (C) Johnathan Nightingale, 2002.  "
+"Use and Distribution subject to GPL.  "
+"For information: http://www.gnu.org/copyleft/.";
+
+/* Meaningful Defaults */
+#define DEFAULT_FREQ       440.0 /* Middle A */
+#define DEFAULT_LENGTH     200   /* milliseconds */
+#define DEFAULT_REPS       1
+#define DEFAULT_DELAY      100   /* milliseconds */
+#define DEFAULT_END_DELAY  NO_END_DELAY
+#define DEFAULT_STDIN_BEEP NO_STDIN_BEEP
+
+/* Other Constants */
+#define NO_END_DELAY    0
+#define YES_END_DELAY   1
+
+#define NO_STDIN_BEEP   0
+#define LINE_STDIN_BEEP 1
+#define CHAR_STDIN_BEEP 2
+
+typedef struct beep_parms_t {
+  float freq;     /* tone frequency (Hz)      */
+  int length;     /* tone length    (ms)      */
+  int reps;       /* # of repetitions         */
+  int delay;      /* delay between reps  (ms) */
+  int end_delay;  /* do we delay after last rep? */
+  int stdin_beep; /* are we using stdin triggers?  We have three options:
+		     - just beep and terminate (default)
+		     - beep after a line of input
+		     - beep after a character of input
+		     In the latter two cases, pass the text back out again,
+		     so that beep can be tucked appropriately into a text-
+		     processing pipe.
+		  */
+  struct beep_parms_t *next;  /* in case -n/--new is used. */
+} beep_parms_t;
+
+#define MAX_ARGS 50
+#define DELIM " \t\n"
+
+int make_command_line(char ***argv, char *s) {
+  int argc;
+  char *p;
+
+  *argv = calloc(MAX_ARGS, sizeof(char *));
+
+  /* the copy needs to start with non-delim */
+  /* the first token won't be a pointer to the mem otherwise */
+  /*s = strdup(p+strspn(s, DELIM));*/
+  s = strdup(s);
+ 
+  argc = 0;
+  (*argv)[argc++] = s;
+  for (p=strtok(s, DELIM); p!=NULL; p=strtok(NULL, DELIM))
+    (*argv)[argc++] = p;
+
+  return argc;
+}
+
+/* Parse the command line.  argv should be untampered, as passed to main.
+ * Beep parameters returned in result, subsequent parameters in argv will over-
+ * ride previous ones.
+ * 
+ * Currently valid parameters:
+ *  "-f <frequency in Hz>"
+ *  "-l <tone length in ms>"
+ *  "-r <repetitions>"
+ *  "-d <delay in ms>"
+ *  "-D <delay in ms>" (similar to -d, but delay after last repetition as well)
+ *  "-s" (beep after each line of input from stdin, echo line to stdout)
+ *  "-c" (beep after each char of input from stdin, echo char to stdout)
+ *  "-h/--help"
+ *  "-v/-V/--version"
+ *  "-n/--new"
+ *
+ * March 29, 2002 - Daniel Eisenbud points out that c should be int, not char,
+ * for correctness on platforms with unsigned chars.
+ */
+void parse_command_line(int argc, char **argv, beep_parms_t *result) {
+  int c;
+  optind=0;
+  while((c = getopt(argc, argv, "f:l:r:d:D:schvVn"))
+	!= EOF) {
+    int argval = -1;    /* handle parsed numbers for various arguments */
+    float argfreq = -1; 
+    switch(c) {      
+    case 'f':  /* freq */
+      if(!sscanf(optarg, "%f", &argfreq) || (argfreq >= 20000 /* ack! */) || 
+	 (argfreq <= 0))
+	break;
+      else
+	result->freq = argfreq;    
+      break;
+    case 'l' : /* length */
+      if(!sscanf(optarg, "%d", &argval) || (argval < 0))
+	break;
+      else
+	result->length = argval;
+      break;
+    case 'r' : /* repetitions */
+      if(!sscanf(optarg, "%d", &argval) || (argval < 0))
+	break;
+      else
+	result->reps = argval;
+      break;
+    case 'd' : /* delay between reps - WITHOUT delay after last beep*/
+      if(!sscanf(optarg, "%d", &argval) || (argval < 0))
+	break;
+      else {
+	result->delay = argval;
+	result->end_delay = NO_END_DELAY;
+      }
+      break;
+    case 'D' : /* delay between reps - WITH delay after last beep */
+      if(!sscanf(optarg, "%d", &argval) || (argval < 0))
+	break;
+      else {
+	result->delay = argval;
+	result->end_delay = YES_END_DELAY;
+      }
+      break;
+    case 's' :
+      result->stdin_beep = LINE_STDIN_BEEP;
+      break;
+    case 'c' :
+      result->stdin_beep = CHAR_STDIN_BEEP;
+      break;
+    case 'v' :
+    case 'V' : /* also --version */
+      printf("%s\n",VERSION_STRING);
+      exit(0);
+      break;
+    case 'n' : /* also --new - create another beep */
+      result->next = (beep_parms_t *)malloc(sizeof(beep_parms_t));
+      result->next->freq       = DEFAULT_FREQ;
+      result->next->length     = DEFAULT_LENGTH;
+      result->next->reps       = DEFAULT_REPS;
+      result->next->delay      = DEFAULT_DELAY;
+      result->next->end_delay  = DEFAULT_END_DELAY;
+      result->next->stdin_beep = DEFAULT_STDIN_BEEP;
+      result->next->next       = NULL;
+      result = result->next; /* yes, I meant to do that. */
+      break;
+    case 'h' : /* notice that this is also --help */
+    default :
+      break;
+    }
+  }
+}  
+
+void play_beep(beep_parms_t parms) {
+  int console_fd;
+  int i; /* loop counter */
+
+  /* try to snag the console */
+  if((console_fd = open("/dev/console", O_WRONLY)) == -1) {
+    fprintf(stderr, "Could not open /dev/console for writing.\n");
+    printf("\a");  /* Output the only beep we can, in an effort to fall back on usefulness */
+    perror("open");
+    exit(1);
+  }
+  
+  /* Beep */
+  for (i = 0; i < parms.reps; i++) {                    /* start beep */
+    if(ioctl(console_fd, KIOCSOUND, (int)(CLOCK_TICK_RATE/parms.freq)) < 0) {
+      printf("\a");  /* Output the only beep we can, in an effort to fall back on usefulness */
+      perror("ioctl");
+    }
+    /* Look ma, I'm not ansi C compatible! */
+    usleep(1000*parms.length);                          /* wait...    */
+    ioctl(console_fd, KIOCSOUND, 0);                    /* stop beep  */
+    if(parms.end_delay || (i+1 < parms.reps))
+       usleep(1000*parms.delay);                        /* wait...    */
+  }                                                     /* repeat.    */
+
+  close(console_fd);
+}
+
+
+
+int beepcmd(char *arg) {
+  int argc;
+  char **argv;
+
+  char sin[4096], *ptr;
+  
+  beep_parms_t *parms = (beep_parms_t *)malloc(sizeof(beep_parms_t));
+  parms->freq       = DEFAULT_FREQ;
+  parms->length     = DEFAULT_LENGTH;
+  parms->reps       = DEFAULT_REPS;
+  parms->delay      = DEFAULT_DELAY;
+  parms->end_delay  = DEFAULT_END_DELAY;
+  parms->stdin_beep = DEFAULT_STDIN_BEEP;
+  parms->next       = NULL;
+
+  // arg = strdup("beep -f 440 -l 120 -D 1 -r 3 -n -f 880 -l 240");
+  argc = make_command_line(&argv, arg);
+  printf("Beeping: %d with %s, %s, %s, %s, %s,...\n",
+  	argc, argv[0] , argv[1], argv[2], argv[3], argv[4]);
+
+  parse_command_line(argc, argv, parms);
+
+  free(*argv);
+  free(argv);
+
+  /* this outermost while loop handles the possibility that -n/--new has been
+     used, i.e. that we have multiple beeps specified. Each iteration will
+     play, then free() one parms instance. */
+  while(parms) {
+    beep_parms_t *next = parms->next;
+
+    play_beep(*parms);
+
+    /* Junk each parms struct after playing it */
+    free(parms);
+    parms = next;
+  }
+
+  return EXIT_SUCCESS;
+}
diff -ruN apinger-0.3-pristine/src/beeplib.h apinger-0.3-mod/src/beeplib.h
--- apinger-0.3-pristine/src/beeplib.h	Thu Jan  1 01:00:00 1970
+++ apinger-0.3-mod/src/beeplib.h	Tue Jul 23 18:52:38 2002
@@ -0,0 +1,19 @@
+/*  beep - just what it sounds like, makes the console beep - but with
+ * precision control.  See the man page for details.
+ *
+ * Try beep -h for command line args
+ *
+ * This code is copyright (C) Johnathan Nightingale, 2000.
+ *
+ * This code may distributed only under the terms of the GNU Public License 
+ * which can be found at http://www.gnu.org/copyleft or in the file COPYING 
+ * supplied with this code.
+ *
+ * This code is not distributed with warranties of any kind, including implied
+ * warranties of merchantability or fitness for a particular use or ability to 
+ * breed pandas in captivity, it just can't be done.
+ *
+ * Bug me, I like it:  http://johnath.com/  or johnath@johnath.com
+ */
+
+int beepcmd(char *arg);
diff -ruN apinger-0.3-pristine/src/cfgparser1.y apinger-0.3-mod/src/cfgparser1.y
--- apinger-0.3-pristine/src/cfgparser1.y	Thu Jul 18 14:32:30 2002
+++ apinger-0.3-mod/src/cfgparser1.y	Tue Jul 23 17:35:13 2002
@@ -80,6 +80,7 @@
 %token MAILSUBJECT
 %token COMMAND
 %token PIPE
+%token BEEP
 
 %token DOWN
 %token LOSS
@@ -222,6 +223,15 @@
 		{ cur_alarm->pipe_on=$3; }
 	| PIPE OFF string 
 		{ cur_alarm->pipe_off=$3; }
+	| BEEP string 
+		{ 
+			if (cur_alarm->beep_on==NULL) cur_alarm->beep_on=$2; 
+			if (cur_alarm->beep_off==NULL) cur_alarm->beep_off=$2; 
+		}
+	| BEEP ON string 
+		{ cur_alarm->beep_on=$3; }
+	| BEEP OFF string 
+		{ cur_alarm->beep_off=$3; }
 
 ;
 
diff -ruN apinger-0.3-pristine/src/cfgparser2.l apinger-0.3-mod/src/cfgparser2.l
--- apinger-0.3-pristine/src/cfgparser2.l	Thu Jul 18 12:35:43 2002
+++ apinger-0.3-mod/src/cfgparser2.l	Tue Jul 23 17:33:33 2002
@@ -74,6 +74,7 @@
 avg_delay_samples	{ LOC; LOCINC; return AVG_DELAY_SAMPLES; }
 avg_loss_delay_samples	{ LOC; LOCINC; return AVG_LOSS_DELAY_SAMPLES; }
 avg_loss_samples	{ LOC; LOCINC; return AVG_LOSS_SAMPLES; }
+beep		{ LOC; LOCINC; return BEEP; }
 command		{ LOC; LOCINC; return COMMAND; }
 debug		{ LOC; LOCINC; return DEBUG; }
 default		{ LOC; LOCINC; return DEFAULT; }
diff -ruN apinger-0.3-pristine/src/conf.c apinger-0.3-mod/src/conf.c
--- apinger-0.3-pristine/src/conf.c	Thu Jul 18 14:32:30 2002
+++ apinger-0.3-mod/src/conf.c	Tue Jul 23 18:49:57 2002
@@ -168,6 +168,10 @@
 				a->pipe_on=cur_config.alarm_defaults.pipe_on;
 			if (a->pipe_off==NULL)
 				a->pipe_off=cur_config.alarm_defaults.pipe_off;
+			if (a->beep_on==NULL)
+				a->beep_on=cur_config.alarm_defaults.beep_on;
+			if (a->beep_off==NULL)
+				a->beep_off=cur_config.alarm_defaults.beep_off;
 		}
 		for(t=cur_config.targets;t;t=t->next){
 			if (t->description==NULL)
diff -ruN apinger-0.3-pristine/src/conf.h apinger-0.3-mod/src/conf.h
--- apinger-0.3-pristine/src/conf.h	Thu Jul 18 14:32:30 2002
+++ apinger-0.3-mod/src/conf.h	Tue Jul 23 17:33:02 2002
@@ -49,6 +49,8 @@
 	char *command_off;
 	char *pipe_on;
 	char *pipe_off;
+	char *beep_on;
+	char *beep_off;
 	union {
 		int val;
 		struct {
diff -ruN apinger-0.3-pristine/src/main.c apinger-0.3-mod/src/main.c
--- apinger-0.3-pristine/src/main.c	Thu Jul 18 14:32:30 2002
+++ apinger-0.3-mod/src/main.c	Tue Jul 23 19:12:07 2002
@@ -56,6 +56,8 @@
 				NULL,		/* command off */
 				NULL,		/* pipe on */
 				NULL,		/* pipe off */
+				NULL,		/* beep on */
+				NULL,		/* beep off */
 				{},		/* params */
 				NULL		/* next */
 		},
